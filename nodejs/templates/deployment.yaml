apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "hmcts.releaseName" . }}
  labels:
    {{- ( include "labels" . ) | indent 4 }}
spec:
  revisionHistoryLimit: 0
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "hmcts.releaseName" . }}
  template:
    metadata:
      labels:
        {{- ( include "labels" . ) | indent 8 }}
    spec:
      {{- if .Values.useInterpodAntiAffinity }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ template "hmcts.releaseName" . }}
            topologyKey: "kubernetes.io/hostname"
      {{- end }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      {{- ( include "secretVolumes" . ) | indent 6 }}
      containers:
      - image: {{ required "An image must be supplied to the chart" .Values.image }}
        name: {{ template "hmcts.releaseName" . }}
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: APPINSIGHTS_INSTRUMENTATIONKEY
          value: {{ .Values.applicationInsightsInstrumentKey | quote }}
          {{- ( include "nodejs.secrets" .) | indent 8 }}
          {{- range $key, $val := .Values.environment }}
        - name: {{ $key }}
          value: {{ $val | quote }}
          {{- end}}
        {{- if .Values.configmap }}
        envFrom:
          - configMapRef:
              name: {{ template "hmcts.releaseName" . }}
        {{- end }}
        {{- ( include "secretMounts" . ) | indent 8 }}
        resources:
          requests:
            memory: {{ .Values.memoryRequests }}
            cpu: {{ .Values.cpuRequests }}
          limits:
            memory: {{ .Values.memoryLimits }}
            cpu: {{ .Values.cpuLimits }}
        ports:
        - containerPort: {{ .Values.applicationPort }}
          name: http
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.livenessDelay }}
          timeoutSeconds: {{ .Values.livenessTimeout }}
          periodSeconds: {{ .Values.livenessPeriod }}
          failureThreshold: {{ .Values.livenessFailureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.readinessDelay }}
          timeoutSeconds: {{ .Values.readinessTimeout }}
          periodSeconds: {{ .Values.readinessPeriod }}
        imagePullPolicy: {{.Values.imagePullPolicy}}
