apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "hmcts.releaseName" . }}
  labels:
    {{- ( include "labels" . ) | indent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "hmcts.releaseName" . }}
  template:
    metadata:
      labels:
        {{- ( include "labels" . ) | indent 8 }}
    spec:
      {{- if .Values.keyVaults }}
      {{ $globals := .Values.global }}
      volumes:
      {{ range $vault, $info := .Values.keyVaults -}}
      - name: {{ $vault }}
        flexVolume:
          driver: "azure/kv"
          secretRef:
            name: chart-flex-ref
          options:
            usepodidentity: "false"
            subscriptionid: {{ $globals.subscriptionId }}
            tenantid: {{ $globals.tenantId | quote}}
            keyvaultname: "{{ $vault }}-{{ $globals.environment }}"
            resourcegroup: "{{ required " .keyVaults.VAULT requires a .resourceGroup" $info.resourceGroup  }}-{{ $globals.environment }}"
            keyvaultobjectnames: "{{range $index, $secret := $info.secrets }}{{if $index}};{{end}}{{ $secret }}{{ end }}"
            keyvaultobjecttypes: "{{range $index, $secret := $info.secrets }}{{if $index}};{{end}}secret{{ end }}"
      {{ end }}
      {{- end -}}
      containers:
      - image: {{ required "An image must be supplied to the chart" .Values.image }}
        name: {{ template "hmcts.releaseName" . }}
        {{- if .Values.environment }}
        env:
          {{- range $key, $val := .Values.environment }}
        - name: {{ $key }}
          value: {{ $val | quote }}
          {{- end}}
        {{- end }}
        {{- if .Values.configmap }}
        envFrom:
          - configMapRef:
              name: {{ template "hmcts.releaseName" . }}
        {{- end }}
        {{- if .Values.keyVaults }}
        volumeMounts:
        {{- range $vault, $info := .Values.keyVaults }}
          - name: {{ $vault }}
            mountPath: /mnt/vaults/{{ $vault }}
            readOnly: true
        {{- end }}
        {{- end }}
        resources:
          requests:
            memory: {{ .Values.memoryRequests }}
            cpu: {{ .Values.cpuRequests }}
          limits:
            memory: {{ .Values.memoryLimits }}
            cpu: {{ .Values.cpuLimits }}
        ports:
        - containerPort: {{ .Values.applicationPort }}
          name: http
        livenessProbe:
          httpGet:
            path: {{ .Values.livenessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.livenessDelay }}
          timeoutSeconds: {{ .Values.livenessTimeout }}
          periodSeconds: {{ .Values.livenessPeriod }}
          failureThreshold: {{ .Values.livenessFailureThreshold }}
        readinessProbe:
          httpGet:
            path: {{ .Values.readinessPath }}
            port: {{ .Values.applicationPort }}
          initialDelaySeconds: {{ .Values.readinessDelay }}
          timeoutSeconds: {{ .Values.readinessTimeout }}
          periodSeconds: {{ .Values.readinessPeriod }}
        imagePullPolicy: IfNotPresent
